<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Telegram - 标签 - Ftbom&#39;s Blog</title>
        <link>https://ftbom.github.io/tags/telegram/</link>
        <description>Telegram - 标签 - Ftbom&#39;s Blog</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>lz490070@gmail.com (Ftbom)</managingEditor>
            <webMaster>lz490070@gmail.com (Ftbom)</webMaster><lastBuildDate>Thu, 05 Jan 2023 18:02:08 &#43;0800</lastBuildDate><atom:link href="https://ftbom.github.io/tags/telegram/" rel="self" type="application/rss+xml" /><item>
    <title>借助Zapier将Disqus通知推送到Telegram机器人</title>
    <link>https://ftbom.github.io/get_disqus_notifications_by_telegram_bot/</link>
    <pubDate>Thu, 05 Jan 2023 18:02:08 &#43;0800</pubDate><author>
        <name>Ftbom</name>
    </author><guid>https://ftbom.github.io/get_disqus_notifications_by_telegram_bot/</guid>
    <description><![CDATA[<p style="text-align: center;">
    
</p>
<p>之前博客的评论系统用的是<a href="https://valine.js.org/" target="_blank" rel="noopener noreferrer">Valine</a>，最近发现不能用了，原来是LeanCloud限制长时间不使用自动冻结应用。为了省事，把博客的评论系统切换到了<a href="https://disqus.com/" target="_blank" rel="noopener noreferrer">Disqus</a>。</p>
<p>Disqus提供了新评论通知的功能，但是只支持邮件通知、网页通知和Rss订阅三种方式。我并不想每次有新评论都收到邮件，Rss订阅又只支持订阅单个话题，于是就想找到通过Telegram收到新评论通知的方法。</p>
<p>最终通过<a href="https://zapier.com" target="_blank" rel="noopener noreferrer">Zapier</a>实现了通过Telegram收到Disqus新评论通知的功能。</p>
<div class="details admonition warning open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-exclamation-triangle fa-fw"></i>警告<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">Zapier免费版每个月只支持运行100次任务，即免费版每个月最多只能收到100条通知</div>
        </div>
    </div>
<h2 id="准备工作" class="headerLink">
    <a href="#%e5%87%86%e5%a4%87%e5%b7%a5%e4%bd%9c" class="header-mark"></a>准备工作</h2><ul>
<li>在Telegram上向<a href="https://t.me/BotFather" target="_blank" rel="noopener noreferrer">@BotFather</a>申请机器人token；</li>
<li>在Telegram上通过<a href="https://t.me/userinfobot" target="_blank" rel="noopener noreferrer">@userinfobot</a>获取用户id；</li>
<li>注册Zapier账号。</li>
</ul>
<blockquote>
<p>Zapier上的Disqus连接器如果设置成同时获取多种类型的新评论，在运行时会报错。需要添加两个Zap分别处理已审批和待审批的新评论。</p>
</blockquote>
<h2 id="待审批的新评论" class="headerLink">
    <a href="#%e5%be%85%e5%ae%a1%e6%89%b9%e7%9a%84%e6%96%b0%e8%af%84%e8%ae%ba" class="header-mark"></a>待审批的新评论</h2><h3 id="设置触发器" class="headerLink">
    <a href="#%e8%ae%be%e7%bd%ae%e8%a7%a6%e5%8f%91%e5%99%a8" class="header-mark"></a>设置触发器</h3><p>首先创建新的Zap，Trigger中的App event选择Disqus连接器，然后Event选择为New Comment。如图所示：</p>
<p style="text-align: center;">
    
</p>
<p>点击Continue，授权Disqus账户，授权后如图所示：</p>
<p style="text-align: center;">
    
</p>
<p>继续设置trigger，include选择Unapproved Posts，Forum选择要获取新评论通知的网站，如图所示：</p>
<p style="text-align: center;">
    
</p>
<p>继续向下，测试trigger，获取网站上的待审批评论的数据。若网站尚未有评论，先自行在网站上发一条评论。</p>
<blockquote>
<p>匿名评论一般是待审批评论</p>
</blockquote>
<h3 id="设置响应动作" class="headerLink">
    <a href="#%e8%ae%be%e7%bd%ae%e5%93%8d%e5%ba%94%e5%8a%a8%e4%bd%9c" class="header-mark"></a>设置响应动作</h3><p>设置Zap的Action，App event选择Code by Zapier，Event选择Run Javascript，如图所示：</p>
<p style="text-align: center;">
    
</p>
<p>Set up action中Input Data设置如下图：</p>
<p style="text-align: center;">
    
</p>
<p><code>tg_token</code>和<code>tg_chatid</code>分别填入准备工作中获取的token和id。</p>
<p>在Set up action的Code中填入以下代码：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="c1">//Telegram机器人token
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">const</span> <span class="nx">TG_API_TOKEN</span> <span class="o">=</span> <span class="nx">inputData</span><span class="p">.</span><span class="nx">tg_token</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">//chatid
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">const</span> <span class="nx">CHAT_ID</span> <span class="o">=</span> <span class="nx">inputData</span><span class="p">.</span><span class="nx">tg_chatid</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">async</span> <span class="kd">function</span> <span class="nx">postData</span><span class="p">(</span><span class="nx">url</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">response</span> <span class="o">=</span> <span class="kr">await</span> <span class="nx">fetch</span><span class="p">(</span><span class="nx">url</span><span class="p">,</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">method</span><span class="o">:</span> <span class="s1">&#39;POST&#39;</span><span class="p">,</span> 
</span></span><span class="line"><span class="cl">    <span class="nx">headers</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="s1">&#39;Content-Type&#39;</span><span class="o">:</span> <span class="s1">&#39;application/json&#39;</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="nx">body</span><span class="o">:</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">});</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="nx">response</span><span class="p">.</span><span class="nx">json</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">message</span> <span class="o">=</span> <span class="sb">`&lt;b&gt;待审批消息&lt;/b&gt;\n&lt;b&gt;用户名&lt;/b&gt;：</span><span class="si">${</span><span class="nx">inputData</span><span class="p">.</span><span class="nx">user_name</span><span class="si">}</span><span class="sb">\n&lt;b&gt;时间&lt;/b&gt;：</span><span class="si">${</span><span class="nx">inputData</span><span class="p">.</span><span class="nx">date</span><span class="si">}</span><span class="sb">\n&lt;b&gt;内容&lt;/b&gt;：</span><span class="si">${</span><span class="nx">inputData</span><span class="p">.</span><span class="nx">message</span><span class="si">}</span><span class="sb">\n&lt;b&gt;文章名&lt;/b&gt;：</span><span class="si">${</span><span class="nx">inputData</span><span class="p">.</span><span class="nx">article</span><span class="si">}</span><span class="sb">\n&lt;b&gt;文章链接&lt;/b&gt;：</span><span class="si">${</span><span class="nx">inputData</span><span class="p">.</span><span class="nx">article_url</span><span class="si">}</span><span class="sb">`</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;Sending out&#34;</span><span class="p">,</span> <span class="nx">message</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">payload</span> <span class="o">=</span> <span class="p">{</span><span class="nx">chat_id</span><span class="o">:</span> <span class="nx">CHAT_ID</span><span class="p">,</span> <span class="nx">text</span><span class="o">:</span> <span class="nx">message</span><span class="p">,</span> <span class="nx">disable_notification</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span> <span class="nx">parse_mode</span><span class="o">:</span> <span class="s2">&#34;HTML&#34;</span><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">//Telegram API
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">const</span> <span class="nx">endpoint</span> <span class="o">=</span> <span class="sb">`https://api.telegram.org/bot</span><span class="si">${</span><span class="nx">TG_API_TOKEN</span><span class="si">}</span><span class="sb">/sendMessage`</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">//POST
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">const</span> <span class="nx">resp</span> <span class="o">=</span> <span class="kr">await</span> <span class="nx">postData</span><span class="p">(</span><span class="nx">endpoint</span><span class="p">,</span> <span class="nx">payload</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;We got&#34;</span><span class="p">,</span> <span class="nx">resp</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">//Zapier output
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">output</span> <span class="o">=</span> <span class="nx">resp</span><span class="p">;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>继续向下，点击Test action可以进行测试，接收待审核评论的消息效果如图：</p>
<p style="text-align: center;">
    
</p>
<h2 id="已审批通过的新评论" class="headerLink">
    <a href="#%e5%b7%b2%e5%ae%a1%e6%89%b9%e9%80%9a%e8%bf%87%e7%9a%84%e6%96%b0%e8%af%84%e8%ae%ba" class="header-mark"></a>已审批/通过的新评论</h2><p>创建一个新的Zap，设置步骤与待审批的新评论设置类似，仅在某些部分有一些更改：</p>
<ul>
<li>设置trigger时include改为选择Approved Posts；</li>
<li>Set up action中Input Data设置如下图，<code>admin_url</code>设置为Disqus用户主页的链接，如：<code>https://disqus.com/by/Ftbom/</code>
<p style="text-align: center;"></p>
</li>
<li>Set up action的Code中填入的代码改为：</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">TG_API_TOKEN</span> <span class="o">=</span> <span class="nx">inputData</span><span class="p">.</span><span class="nx">tg_token</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">CHAT_ID</span> <span class="o">=</span> <span class="nx">inputData</span><span class="p">.</span><span class="nx">tg_chatid</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">async</span> <span class="kd">function</span> <span class="nx">postData</span><span class="p">(</span><span class="nx">url</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">response</span> <span class="o">=</span> <span class="kr">await</span> <span class="nx">fetch</span><span class="p">(</span><span class="nx">url</span><span class="p">,</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">method</span><span class="o">:</span> <span class="s1">&#39;POST&#39;</span><span class="p">,</span> 
</span></span><span class="line"><span class="cl">    <span class="nx">headers</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="s1">&#39;Content-Type&#39;</span><span class="o">:</span> <span class="s1">&#39;application/json&#39;</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="nx">body</span><span class="o">:</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">});</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="nx">response</span><span class="p">.</span><span class="nx">json</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">message</span> <span class="o">=</span> <span class="sb">`&lt;b&gt;新评论&lt;/b&gt;\n&lt;b&gt;用户名&lt;/b&gt;：</span><span class="si">${</span><span class="nx">inputData</span><span class="p">.</span><span class="nx">user_name</span><span class="si">}</span><span class="sb">\n&lt;b&gt;时间&lt;/b&gt;：</span><span class="si">${</span><span class="nx">inputData</span><span class="p">.</span><span class="nx">date</span><span class="si">}</span><span class="sb">\n&lt;b&gt;内容&lt;/b&gt;：</span><span class="si">${</span><span class="nx">inputData</span><span class="p">.</span><span class="nx">message</span><span class="si">}</span><span class="sb">\n&lt;b&gt;文章名&lt;/b&gt;：</span><span class="si">${</span><span class="nx">inputData</span><span class="p">.</span><span class="nx">article</span><span class="si">}</span><span class="sb">\n&lt;b&gt;文章链接&lt;/b&gt;：</span><span class="si">${</span><span class="nx">inputData</span><span class="p">.</span><span class="nx">article_url</span><span class="si">}</span><span class="sb">`</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">payload</span> <span class="o">=</span> <span class="p">{</span><span class="nx">chat_id</span><span class="o">:</span> <span class="nx">CHAT_ID</span><span class="p">,</span> <span class="nx">text</span><span class="o">:</span> <span class="nx">message</span><span class="p">,</span> <span class="nx">disable_notification</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span> <span class="nx">parse_mode</span><span class="o">:</span> <span class="s2">&#34;HTML&#34;</span><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">endpoint</span> <span class="o">=</span> <span class="sb">`https://api.telegram.org/bot</span><span class="si">${</span><span class="nx">TG_API_TOKEN</span><span class="si">}</span><span class="sb">/sendMessage`</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">resp</span> <span class="o">=</span> <span class="p">{</span><span class="nx">info</span><span class="o">:</span> <span class="s1">&#39;do nothing&#39;</span><span class="p">};</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="p">(</span><span class="nx">inputData</span><span class="p">.</span><span class="nx">isAnonymous</span> <span class="o">==</span> <span class="s1">&#39;True&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">resp</span> <span class="o">=</span> <span class="p">{</span><span class="nx">info</span><span class="o">:</span> <span class="s1">&#39;is anonymous&#39;</span><span class="p">};</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">inputData</span><span class="p">.</span><span class="nx">profileUrl</span> <span class="o">==</span> <span class="nx">inputData</span><span class="p">.</span><span class="nx">admin_url</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">resp</span> <span class="o">=</span> <span class="p">{</span><span class="nx">info</span><span class="o">:</span> <span class="s1">&#39;is admin&#39;</span><span class="p">};</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="k">else</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;Sending out&#34;</span><span class="p">,</span> <span class="nx">message</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="nx">resp</span> <span class="o">=</span> <span class="kr">await</span> <span class="nx">postData</span><span class="p">(</span><span class="nx">endpoint</span><span class="p">,</span> <span class="nx">payload</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;We got&#34;</span><span class="p">,</span> <span class="nx">resp</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">output</span> <span class="o">=</span> <span class="nx">resp</span><span class="p">;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="结语" class="headerLink">
    <a href="#%e7%bb%93%e8%af%ad" class="header-mark"></a>结语</h2><p>经过上述步骤的设置，对于所有待审批的评论都通知；对于已审批/通过的评论，若发帖人是匿名用户或博主则不进行通知。</p>
<p>当网站上出现新评论后，大概延迟2-10分钟才会收到通知。</p>
]]></description>
</item><item>
    <title>pyTelegramBotAPI基础</title>
    <link>https://ftbom.github.io/basic_of_pytelegrambotapi/</link>
    <pubDate>Wed, 04 Jan 2023 09:07:21 &#43;0800</pubDate><author>
        <name>Ftbom</name>
    </author><guid>https://ftbom.github.io/basic_of_pytelegrambotapi/</guid>
    <description><![CDATA[<p style="text-align: center;">
    
</p>
<div class="details admonition warning open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-exclamation-triangle fa-fw"></i>pyTelegramBotAPI版本<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">pyTelegramBotAPI 4.8.0</div>
        </div>
    </div>
<p><a href="https://github.com/eternnoir/pyTelegramBotAPI" target="_blank" rel="noopener noreferrer">pyTelegramBotAPI</a>是用于开发Telegram机器人的Python库，使用简单，上手较快。在这里记录一下pyTelegramBotAPI库的基础用法。</p>
<h2 id="基本部分" class="headerLink">
    <a href="#%e5%9f%ba%e6%9c%ac%e9%83%a8%e5%88%86" class="header-mark"></a>基本部分</h2><p>Telegram机器人运行所需的最基本部分为：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">telebot</span>
</span></span><span class="line"><span class="cl"><span class="n">bot</span> <span class="o">=</span> <span class="n">telebot</span><span class="o">.</span><span class="n">TeleBot</span><span class="p">(</span><span class="s2">&#34;YOUR_BOT_TOKEN&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">bot</span><span class="o">.</span><span class="n">infinity_polling</span><span class="p">()</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>初始化<code>TeleBot</code>对象时需传入向<a href="https://t.me/BotFather" target="_blank" rel="noopener noreferrer">@BotFather</a>申请的token。</p>
<p>通过以下代码可以设置代理：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">telebot</span> <span class="kn">import</span> <span class="n">apihelper</span>
</span></span><span class="line"><span class="cl"><span class="n">apihelper</span><span class="o">.</span><span class="n">proxy</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;http&#39;</span><span class="p">:</span> <span class="s1">&#39;http://127.0.0.1:108&#39;</span><span class="p">,</span> <span class="s1">&#39;https&#39;</span><span class="p">:</span> <span class="s1">&#39;http://127.0.0.1:108&#39;</span><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="绑定命令" class="headerLink">
    <a href="#%e7%bb%91%e5%ae%9a%e5%91%bd%e4%bb%a4" class="header-mark"></a>绑定命令</h2><p>以下代码定义了机器人的<code>/start</code>和<code>/help</code>命令：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">telebot</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">bot</span> <span class="o">=</span> <span class="n">telebot</span><span class="o">.</span><span class="n">TeleBot</span><span class="p">(</span><span class="s2">&#34;YOUR_BOT_TOKEN&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@bot</span><span class="o">.</span><span class="n">message_handler</span><span class="p">(</span><span class="n">commands</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;start&#39;</span><span class="p">])</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">send_welcome</span><span class="p">(</span><span class="n">message</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">	<span class="n">bot</span><span class="o">.</span><span class="n">send_message</span><span class="p">(</span><span class="n">message</span><span class="o">.</span><span class="n">chat</span><span class="o">.</span><span class="n">id</span><span class="p">,</span> <span class="s2">&#34;Test&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@bot</span><span class="o">.</span><span class="n">message_handler</span><span class="p">(</span><span class="n">commands</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;help&#39;</span><span class="p">])</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">send_help</span><span class="p">(</span><span class="n">message</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">	<span class="n">bot</span><span class="o">.</span><span class="n">send_message</span><span class="p">(</span><span class="n">message</span><span class="o">.</span><span class="n">chat</span><span class="o">.</span><span class="n">id</span><span class="p">,</span> <span class="s2">&#34;&lt;b&gt;Test&lt;/b&gt;&#34;</span><span class="p">,</span> <span class="n">parse_mode</span> <span class="o">=</span> <span class="s2">&#34;HTML&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">bot</span><span class="o">.</span><span class="n">infinity_polling</span><span class="p">()</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><code>send_message</code>函数传入的第一个参数是当前对话的id，第二个参数是发送消息的内容。通过<code>parse_mode</code>可以设置消息内容的格式。</p>
<p>上述代码的运行效果如下：</p>
<p style="text-align: center;">
    
</p>
<h2 id="编辑消息" class="headerLink">
    <a href="#%e7%bc%96%e8%be%91%e6%b6%88%e6%81%af" class="header-mark"></a>编辑消息</h2><p>编辑消息的函数为<code>edit_message_text</code>，使用实例如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">bot</span><span class="o">.</span><span class="n">edit_message_text</span><span class="p">(</span><span class="s1">&#39;Edited&#39;</span><span class="p">,</span> <span class="n">chat_id</span> <span class="o">=</span> <span class="n">message</span><span class="o">.</span><span class="n">chat</span><span class="o">.</span><span class="n">id</span><span class="p">,</span> <span class="n">message_id</span> <span class="o">=</span> <span class="n">message</span><span class="o">.</span><span class="n">message_id</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>第一个参数是消息的内容，第二个参数是对话的id，第三个参数是消息的id。若消息的内容与编辑之前相同，则会报错。</p>
<h2 id="定义下一步" class="headerLink">
    <a href="#%e5%ae%9a%e4%b9%89%e4%b8%8b%e4%b8%80%e6%ad%a5" class="header-mark"></a>定义下一步</h2><p>通过<code>register_next_step_handler</code>函数可以定义下一步的操作的函数，同时可以向函数传递参数：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">telebot</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">bot</span> <span class="o">=</span> <span class="n">telebot</span><span class="o">.</span><span class="n">TeleBot</span><span class="p">(</span><span class="s2">&#34;YOUR_BOT_TOKEN&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">test_next</span><span class="p">(</span><span class="n">message</span><span class="p">,</span> <span class="n">test1</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">test2</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">bot</span><span class="o">.</span><span class="n">send_message</span><span class="p">(</span><span class="n">message</span><span class="o">.</span><span class="n">chat</span><span class="o">.</span><span class="n">id</span><span class="p">,</span> <span class="sa">f</span><span class="s1">&#39;</span><span class="si">{</span><span class="n">test1</span><span class="si">}</span><span class="s1">+</span><span class="si">{</span><span class="n">test2</span><span class="si">}</span><span class="s1">&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@bot</span><span class="o">.</span><span class="n">message_handler</span><span class="p">(</span><span class="n">commands</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;test&#39;</span><span class="p">])</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">test</span><span class="p">(</span><span class="n">message</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">msg</span> <span class="o">=</span> <span class="n">bot</span><span class="o">.</span><span class="n">send_message</span><span class="p">(</span><span class="n">message</span><span class="o">.</span><span class="n">chat</span><span class="o">.</span><span class="n">id</span><span class="p">,</span> <span class="s2">&#34;Test&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">bot</span><span class="o">.</span><span class="n">register_next_step_handler</span><span class="p">(</span><span class="n">msg</span><span class="p">,</span> <span class="n">test_next</span><span class="p">,</span> <span class="s1">&#39;test1&#39;</span><span class="p">,</span> <span class="s1">&#39;test2&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">bot</span><span class="o">.</span><span class="n">infinity_polling</span><span class="p">()</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>下一步操作将会在接收到用户输入后进行触发。</p>
<p>上述代码的运行效果如下：</p>
<p style="text-align: center;">
    
</p>
<h2 id="消息按键" class="headerLink">
    <a href="#%e6%b6%88%e6%81%af%e6%8c%89%e9%94%ae" class="header-mark"></a>消息按键</h2><p>Telegram的消息按键有两种：<code>ReplyKeyboard</code>和<code>InlineKeyboard</code></p>
<h3 id="replykeyboard" class="headerLink">
    <a href="#replykeyboard" class="header-mark"></a>ReplyKeyboard</h3><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">telebot</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">telebot.types</span> <span class="kn">import</span> <span class="n">ReplyKeyboardMarkup</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">bot</span> <span class="o">=</span> <span class="n">telebot</span><span class="o">.</span><span class="n">TeleBot</span><span class="p">(</span><span class="s2">&#34;YOUR_BOT_TOKEN&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">test_next</span><span class="p">(</span><span class="n">message</span><span class="p">,</span> <span class="n">test1</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">test2</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">bot</span><span class="o">.</span><span class="n">send_message</span><span class="p">(</span><span class="n">message</span><span class="o">.</span><span class="n">chat</span><span class="o">.</span><span class="n">id</span><span class="p">,</span> <span class="sa">f</span><span class="s1">&#39;</span><span class="si">{</span><span class="n">test1</span><span class="si">}</span><span class="s1">+</span><span class="si">{</span><span class="n">test2</span><span class="si">}</span><span class="s1">&#39;</span><span class="p">,</span> <span class="n">reply_markup</span> <span class="o">=</span> <span class="n">ReplyKeyboardRemove</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@bot</span><span class="o">.</span><span class="n">message_handler</span><span class="p">(</span><span class="n">commands</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;test&#39;</span><span class="p">])</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">test</span><span class="p">(</span><span class="n">message</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">markup</span> <span class="o">=</span> <span class="n">ReplyKeyboardMarkup</span><span class="p">(</span><span class="n">resize_keyboard</span> <span class="o">=</span> <span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">markup</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="s1">&#39;test1&#39;</span><span class="p">,</span> <span class="s1">&#39;test2&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">msg</span> <span class="o">=</span> <span class="n">bot</span><span class="o">.</span><span class="n">send_message</span><span class="p">(</span><span class="n">message</span><span class="o">.</span><span class="n">chat</span><span class="o">.</span><span class="n">id</span><span class="p">,</span> <span class="s2">&#34;Test&#34;</span><span class="p">,</span> <span class="n">reply_markup</span> <span class="o">=</span> <span class="n">markup</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">bot</span><span class="o">.</span><span class="n">register_next_step_handler</span><span class="p">(</span><span class="n">msg</span><span class="p">,</span> <span class="n">test_next</span><span class="p">,</span> <span class="s1">&#39;test1&#39;</span><span class="p">,</span> <span class="s1">&#39;test2&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">bot</span><span class="o">.</span><span class="n">infinity_polling</span><span class="p">()</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>在<code>ReplyKeyboardMarkup</code>初始化时将<code>resize_keyboard</code>设为<code>True</code>，则按键会自动调节到合适的高度。</p>
<p>当输入<code>/test</code>，机器人的运行结果为：</p>
<p style="text-align: center;">
    
</p>
<p>若将<code>reply_markup</code>的值设为<code>ReplyKeyboardRemove</code>，按键会在发送该消息后消失，否则按键不会消失。</p>
<p>运行效果为：</p>
<p style="text-align: center;">
    
</p>
<h3 id="inlinekeyboard" class="headerLink">
    <a href="#inlinekeyboard" class="header-mark"></a>InlineKeyboard</h3><p><code>InlineKeyboard</code>是在消息的下方带有按键，且可定义按键的类型，常用的按键类型为：</p>
<ul>
<li>callback_data：按下按键则调用回调函数</li>
<li>url：按下按键则打开链接</li>
</ul>
<p>pyTelegramBotAPI提供了<code>quick_markup</code>函数来帮助创建<code>InlineKeyboardMarkup</code>。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">telebot</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">telebot.util</span> <span class="kn">import</span> <span class="n">quick_markup</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">bot</span> <span class="o">=</span> <span class="n">telebot</span><span class="o">.</span><span class="n">TeleBot</span><span class="p">(</span><span class="s2">&#34;YOUR_BOT_TOKEN&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@bot</span><span class="o">.</span><span class="n">message_handler</span><span class="p">(</span><span class="n">commands</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;test&#39;</span><span class="p">])</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">test</span><span class="p">(</span><span class="n">message</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">button</span> <span class="o">=</span> <span class="p">{</span><span class="s2">&#34;test1&#34;</span><span class="p">:</span> <span class="p">{</span><span class="s2">&#34;callback_data&#34;</span><span class="p">:</span> <span class="s2">&#34;test&#34;</span><span class="p">},</span>
</span></span><span class="line"><span class="cl">            <span class="s2">&#34;test2&#34;</span><span class="p">:</span> <span class="p">{</span><span class="s2">&#34;url&#34;</span><span class="p">:</span> <span class="s2">&#34;google.com&#34;</span><span class="p">}}</span>
</span></span><span class="line"><span class="cl">    <span class="n">bot</span><span class="o">.</span><span class="n">send_message</span><span class="p">(</span><span class="n">message</span><span class="o">.</span><span class="n">chat</span><span class="o">.</span><span class="n">id</span><span class="p">,</span> <span class="s2">&#34;Test&#34;</span><span class="p">,</span> <span class="n">reply_markup</span> <span class="o">=</span> <span class="n">quick_markup</span><span class="p">(</span><span class="n">button</span><span class="p">,</span> <span class="n">row_width</span> <span class="o">=</span> <span class="mi">2</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@bot</span><span class="o">.</span><span class="n">callback_query_handler</span><span class="p">(</span><span class="n">func</span><span class="o">=</span><span class="k">lambda</span> <span class="n">call</span><span class="p">:</span> <span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">refresh</span><span class="p">(</span><span class="n">call</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="n">call</span><span class="o">.</span><span class="n">data</span> <span class="o">==</span> <span class="s2">&#34;test&#34;</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="n">bot</span><span class="o">.</span><span class="n">send_message</span><span class="p">(</span><span class="n">call</span><span class="o">.</span><span class="n">message</span><span class="o">.</span><span class="n">chat</span><span class="o">.</span><span class="n">id</span><span class="p">,</span> <span class="s2">&#34;Test Callback&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">bot</span><span class="o">.</span><span class="n">answer_callback_query</span><span class="p">(</span><span class="n">call</span><span class="o">.</span><span class="n">id</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">bot</span><span class="o">.</span><span class="n">infinity_polling</span><span class="p">()</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><code>quick_markup</code>的<code>row_width</code>参数定义了同一行的最大按钮数量。</p>
<p>上述代码定义的<code>InlineKeyboard</code>样式为：</p>
<p style="text-align: center;">
    
</p>
<p>通过<code>@bot.callback_query_handler</code>函数修饰符对<code>callback_data</code>处理，<code>call.data</code>对应<code>callback_data</code>。再按下按键后，按键上会出现进度标志，通过调用<code>answer_callback_query</code>可以消去进度标志。</p>
<p>上述代码，按下test1按钮后，结果为：</p>
<p style="text-align: center;">
    
</p>
<h2 id="文件处理" class="headerLink">
    <a href="#%e6%96%87%e4%bb%b6%e5%a4%84%e7%90%86" class="header-mark"></a>文件处理</h2><p>Telegram消息主要的文件类型为：<code>animation</code>、<code>audio</code>、<code>document</code>、<code>photo</code>、<code>sticker</code>、<code>video</code>、<code>video_note</code>、<code>voice</code>，这些文件类型都有对应的<code>file_id</code>，通过id可以获取文件的下载链接。</p>
<p>获取id:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">file_id</span> <span class="o">=</span> <span class="n">message</span><span class="o">.</span><span class="n">document</span><span class="o">.</span><span class="n">file_id</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>获取下载链接：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">download_url</span> <span class="o">=</span> <span class="n">bot</span><span class="o">.</span><span class="n">get_file_url</span><span class="p">(</span><span class="n">file_id</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>若收到的消息不是此种文件类型，则<code>message.&lt;type&gt;</code>返回<code>None</code></p>
<p>在这些文件类型中，<code>photo</code>类型有所不同，其返回值是一个数组，数组的每个元素对应不同的分辨率。</p>
<h2 id="结语" class="headerLink">
    <a href="#%e7%bb%93%e8%af%ad" class="header-mark"></a>结语</h2><p>这篇文章中记录的是pyTelegramBotAPI的基本用法，也是我在项目<a href="https://github.com/Ftbom/mypybot" target="_blank" rel="noopener noreferrer">mypybot</a>中用到的主要API内容。</p>
]]></description>
</item></channel>
</rss>
